#!/bin/bash

#. /usr/local/bin/editscript

sourcefn(){
  local lib fn verbose awkout OPTIND
  while getopts 'l:f:v' opt; do
    case $opt in
      l) lib=$OPTARG ;;
      f) fn+=($OPTARG) ;;
      v) verbose=1 ;;
      *) echo "Usage: sourcefunc -l <libfile> -f <funcname> [-v]" >&2; return 1 ;;
    esac
  done

  (( verbose )) && printf 'lib=%s\nverbose=%s\n' "$lib" "$verbose"
  (( verbose )) && printf 'fn=%s\n' "${fn[@]}"

  [[ -z $lib || -z $fn ]] && { printf 'Library and function name required.\n\n' >&2; return 1; }
  [[ ! -f $lib ]] && { printf 'Library file not found: %s\n\n' "$lib" >&2; return 1; }

  for f in "${fn[@]}"; do
    awkout="$(awk -v fn="$f" '
      $0 ~ "^"fn"\\(\\)\\{" {infn=1}
      infn {print}
      $0 ~ "^##--> "fn"\\(\\) <--" {infn=0}
    ' "$lib")"

    [[ -z $awkout ]] && { printf 'Function %s not found in %s\n\n' "$f" "$lib" >&2; return 1; }

    [[ $verbose ]] && printf %s\\n "$awkout"
    source <(echo "$awkout")
  done
}
##--> sourcefn() <--################################################################


confirm(){
  local def prompt reply msg

  while [[ $# -gt 0 ]]; do
    case $1 in
      -1)
        empty=1
        shift
        ;;
      -y|-Y|-n|-N)
        def="${1#-}"
        shift
        ;;
      -d|--default)
        def="$2"
        shift 2
        ;;
      --default=*)
        def="${1#*=}"
        shift 1
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo "Unknown option: $1" >&2
        return 2
        ;;
      *)
        break
        ;;
    esac
  done

#  msg=$1
  msg="$(printf %b "$1")"
  shift

  case $def in
    y|Y) prompt=" [Y/n] "; def=y ;;
    n|N) prompt=" [y/N] "; def=n ;;
    *)   prompt=" [y/n] "; def= ;;
  esac

  read -p "$msg$prompt" -n 1 -r reply
  printf \\n

  reply=${reply:-$def}

  [[ $reply =~ ^[Yy]$ ]]
}
##--> confirm() <--################################################################

delugecreds(){
  hostlistconf="$HOME/.config/deluge/hostlist.conf"
  local confvalues
  readarray -t confvalues < <(jq -r '.hosts[0] | select(. != null) | .[0], .[1], .[2], .[3], .[4]' "$hostlistconf")
  delugehost="${confvalues[1]}"
  delugeport="${confvalues[2]}"
  delugeuser="${confvalues[3]}"
  delugepass="${confvalues[4]}"
  tracker="$(jq -r '.trackers.mam' "$hostlistconf")"
}
##--> delugecreds() <--################################################################


delugecreds(){
  # Generic config structure example:
  # -------------------------------
  # {
  #   "trackers": {
  #     "tracker_name": "https://your.tracker.url/announce"
  #   },
  #   "hosts": {
  #     "host_name": {
  #       "host": "hostname_or_ip",
  #       "port": 12345,
  #       "user": "username",
  #       "pass": "password"
  #     }
  #   }
  # }
  #
  # The config file should be located at:
  # $HOME/.config/mklnbook/mklnbook.conf

  # expected default config structure:
  local example='{
  "trackers": {
    "trackername": "https://example.com/tracker/announce"
  },
  "hosts": {
    "hostname": {
      "host": "host.example.com",
      "port": 12345,
      "user": "username",
      "pass": "password"
    }
  }
}'

 local conf="$HOME/.config/mklnbook/mklnbook.conf"

 OPTIND=1

  while getopts 'ch:t:l' opt; do
    case $opt in
      c) [[ -z "$OPTARG" ]] && { printf 'Missing config file for -c option!\n\nExample config file format:\n%s\n' "$example"; return 1; } || conf=$OPTARG ;;
      h) host=$OPTARG ;;
      t) sitetracker=$OPTARG ;;
      l)
        echo "Hosts:"
        jq -r '.hosts | keys[]' "$conf"
        echo
        echo "Trackers:"
        jq -r '.trackers | keys[]' "$conf"
        return 0
        ;;
      *) echo "Usage: delugecreds [-c config] [-h host] [-t tracker]" >&2; return 1 ;;
    esac
  done

  delugehost="$(jq -r ".hosts.\"$host\".host" "$conf")"
  delugeport="$(jq -r ".hosts.\"$host\".port" "$conf")"
  delugeuser="$(jq -r ".hosts.\"$host\".user" "$conf")"
  delugepass="$(jq -r ".hosts.\"$host\".pass" "$conf")"
  tracker="$(jq -r ".trackers.\"$sitetracker\"" "$conf")"
}
##--> delugecreds() <--################################################################

mklnbook(){
## need to make a config file with e.g., the linked dir and delugecreds location in it
  iton="$(tput sitm)"
  itoff="$(tput ritm)"
  tput0="$(tput sgr0)"
  boldred="$(tput setaf 9 bold)"
  bold="$(tput bold)"
  blink="$(tput blink)"
  red="$(tput setaf 9)" #red fg
  green="$(tput setaf 2)" #green fg
  white="$(tput setaf 15)" #white fg
  teal="$(tput setaf 6)" #teal fg
  yellow="$(tput setaf 11)"
  brgreen="$(tput setaf 10)"
  boldyellow="$(tput setaf 11 bold)"

  sourcefn -l $HOME/bin/gits/indexopus/indexopus.lib -f printline #-f hr2 -v

  sec2sex(){
    local h m s d
    local input="${1%.*}"
    local dec="${1#*.}"
    [[ -z "$dec" ]] && dec=0
    d="${dec:0:3}"
    [[ ${#d} -lt 3 ]] && d=$(printf "%-3s" "$d" | tr ' ' '0')

#    [[ "${dec:0:1}" > 4 ]] && ((input++)) # why is this here?  we're retaining the decimal!

    h=$(( input / 3600 ))
    m=$(( (input % 3600) / 60 ))
    s=$(( input % 60 ))

  printf "%02d:%02d:%02d.%03d" "$((10#$h))" "$((10#$m))" "$((10#$s))" "$((10#$d))"
  }
##--> sec2sex() <--################################################################


  getcoverurl(){
    local jsondir asin
    jsondir="$1"
    ! [[ -d "$jsondir" ]] && jsondir="$(realpath "$jsondir")"
    ! [[ -d "$jsondir" ]] && { printf '%s is not a valid path to a metadata.json file!\n.Investigage. (return 1)\n\n'; return 1; }
## from vito: Book ASINs are either just numbers or A-Z0-9, but start with B0.
    asin="$(jq -r .asin "$jsondir/metadata.json")"
(( verbose )) && read -rp "[verbose] \$asin: $asin"
    if [[ "$asin" =~ ^(B[0-9A-Z]{9}|[0-9]{10})$ ]]; then
      (( verbose )) && printf '[verbose] ASIN in metadata.json appears to be valid: %s\n' "$asin"
    elif [[ "$asin" != "null" ]]; then
      printf 'ASIN in metadata.json does not match the regex: %s\n' "$asin"
      confirm "Use this ASIN to look for a cover url?" || unset asin
    else
      printf 'The metadata.json file does not have an ASIN (returned null).\n'
      unset asin
    fi

    [[ "$asin" ]] && coverurl=$(curl -s -H 'accept: application/json' \
                   "https://audimeta.de/book/$asin?cache=false" | jq -r '.imageUrl')
    [[ "$coverurl" = https*jpg ]] && { (( verbose )) && printf '[verbose] Cover url:\n\n'; printf %s\\n "$coverurl"; return 0; }

    return 1

  }
##--> getcoverurl() <--################################################################

printdescrip(){
  local allogg
  shopt -s nullglob
  allogg=( *ogg )
  ! (( "${#allogg[@]}" )) && { printf 'No .ogg file found; not launched from a linked directory? Exiting. (return 1)\n'; return 1; }
  (( verbose )) && printf '%s\n' "${allogg[@]}"
  (( description )) && t="${allogg[0]% -- *}"
  printline "MediaInfo of $t -- Audiobook.ogg"
  printf \\n
  mediainfo "$t -- Audiobook.ogg"
  mediainfo "$t -- Audiobook.ogg"|xclip 2>/dev/null
  pubdate="$(mediainfo "$t -- Audiobook.ogg" |\grep -E ^Recorded\ date\ +\:)"
  pubdate="${pubdate#* : }"
## switching from mediaduration to ffprobe due to the former being inconsistent and reporting only hours
## (when over 100 h?)
#  readarray -t duration < <(mediainfo "$t -- Audiobook.ogg" |\grep -E ^Duration\ +\:|sort -u)
#  duration="${duration[0]#* : }"
#  hh="${duration% h*}"; (( "${#hh}" < 3 )) && hh="$(printf '%02d' "$hh")"
#  mm="${duration#* h }"; mm="${mm% min}"; mm="$(printf '%02d' "$mm")"
  IFS=: read -r hh mm ss < <(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 -sexagesimal "$t -- Audiobook.ogg")
#  (( "${#hh}" < 3 )) && hh="$(printf '%02d' "$hh")"
#  (( "${#hh}" == 3 )) && hhmm="$hh:$mm hhh:mm" || hhmm="$hh:$mm hh:mm"
  (( "${#hh}" == 3 )) && hhmm="$hh:$mm hhh:mm" || hhmm="$(printf '%02d' "$hh"):$mm hh:mm"
  (( "${#hh}" > 3 )) && { printf 'Error: Book appears to have a duration over 1000 hours!  Investigate.\nExiting (return 1)\n\n'; return 1; }
  readarray -t genretags < <({ mediainfo "$t -- Audiobook.ogg" | sed -n 's/^Genre[[:space:]]\+: //p'; mediainfo "$t -- Audiobook.ogg" | sed -n 's/^Tags[[:space:]]\+: //p'; } | tr '/' '\n'|sed 's/^[[:space:]]*//;s/[[:space:]]*$//'|sort -u )
  printf \\n

  printf %s\ \|\ %s\ \|\  "$pubdate" "$hhmm"
  printf %s\ \|\   "${genretags[@]}"
  printf '17 kb/s opus transcode | embedded chapter index and cover\n\n'
  (( description )) && swd="$(readlink "${allogg[0]}")" && swd="${swd%\/*}" && read -rp "$swd"
## not sure I want to use "$swd" here, but it should suffice, at least to start.
   coverurl="$(getcoverurl "$swd")"
   printf %s\\n "${coverurl:-'Unable to retrieve cover url\!'}"
}
##--> printdescrip() <--################################################################



  local a sd f t i d abscover linked linkedd hostlistconf delugehost delugeport delugeuser delugepass swd verbose cktorrent yes asin nowrite nometadata description
  linked='/library/torrent/seeds/mam/linked'
  clear -x
  printline "\n Starting ${FUNCNAME[0]} \n"

  swd="$(pwd)"

  [[ "$1" = @(-v|--verbose) ]] && shift && verbose=1
  [[ "$1" = -y ]] && shift && yes=1
  [[ "$1" = -Y ]] && shift && YES=1 && yes=1
  [[ "$1" = @(-c|--cover) ]] && shift && coveronly=1 && { getcoverurl "$swd"; ec="$?"; printf \\n; return "$ec"; }
  [[ "$1" = @(-d|--description) ]] && printf '\n\nPrinting description\n' && shift && description=1 && { printdescrip; ec="$?"; printf \\n; return "$ec"; }

#  hostlistconf="$HOME/.config/deluge/hostlist.conf"
  delugecreds -h gigabyte -t mam
  printf 'Directory/symlink link destination:\n%s%s%s\n' "$teal" "$linked" "$white"
  [[ ! "$1" ]] && set -- .
(( verbose )) && printf '[verbose] $1: %s\n' "$1"
  set -- "$(realpath "$1")"
(( verbose )) && printf '[verbose] $1: %s\n' "$1"
  [[ "$1" = *꞉* ]] && mv "$1" "${1//꞉/:}" && set -- "$(realpath "${1//꞉/:}")" && swd="$1"

  ! [[ -f "$swd/metadata.json" ]] && nometadata=1

  if (( nometadata )); then
    swddirs=( "$1"/*/ )
(( verbose )) && printf '[verbose] ${swddirs[@]}: %s\n' "${swddirs[@]}"
    (( "${#swddirs[@]}" == 1 )) && seldir="${swddirs[0]}"
    (( "${#swddirs[@]}" > 1 )) && seldir="$(printf %s\\n "${swddirs[@]}"|gum choose --header="Select a starting audiobook directory:")"
(( verbose )) && read -rp "[verbose] $(printf \$seldir\:\ %s\\n "$seldir")"
    [[ -f "$seldir/metadata.json" ]] && unset nometadata && cd "$seldir" && set -- "$(pwd)" && swd="$1"
(( verbose )) && read -rp "$(printf '[verbose] $1: %s\n$swd: %s\n$nometadata: %s\n' "$1" "$swd" "$nometadata")"
    if (( nometadata )); then
      ogg=( *\ --\ Audiobook.ogg )
      if (( "${#ogg[@]}" == 1 )) && [[ -L "$ogg" ]]; then
        ogg="${ogg[0]}"
        oggsrc="$(realpath "${ogg[0]}")"
        oggsrcdir="${oggsrc%/*}"
        printf '\n\nNo metadata.json was found in the starting directory!\nThis appears to be a directory for linked .ogg files:\n\n%s\n' "$oggsrcdir"
        eza -la --no-user
        printf '\n\n...checking for source dir...\n\n'
        [[ -f "$oggsrcdir/metadata.json" ]] && unset nometadata &&
           cd "$oggsrcdir" && set -- "$(pwd)" && swd="$1"
        printf 'Changed pwd to the source dir:\n\n%s\n' "$(pwd)"
        eza -la --no-user
        printf \\n\\n
        confirm -y "Start the script from here?" && confirm -y "This will overwrite the starting directory!\n\nConfirm:" || { printf 'Investigate. (return 1)\n\n' && return 1; }
      else
        { printf 'There is no metadata.json file to use. Investigate. (return 1)\n\n' && return 1; }
      fi
    fi
  fi


(( verbose )) &&  printf '[verbose] $1: %s\n' "$1"
  sd="$(realpath "$1")"
  t="${sd##*\/}"     #this title comes from the directory name and won't necessarily be consistent with the <title> -- Audiobook.opus
  sd="${sd%\/"$t"}"
  a="${sd##*\/}"
  sd="${sd%\/"$a"}"
  d="$a -- $t";
  [[ "$d" = *\:* ]] && d="${d//:/=}"
  [[ "$d" = *\?* ]] && d="${d//\?/ }"
  [[ "$d" = *\\* ]] && d="${d//\\/∕}"  #this substituted U+2215 `∕` for the backslash in names
  torrentfile="/library/torrent/$d.torrent"


# check to see if the symlink destination directory exists, is empty, creates it on empty
# and checks to see it the .torrent file is there.  Asks for confirmation to overwrite the dest. dir.
# should be able to reuse "$cktorrent" before creating the torrent with transmission-create
  shopt -q nullglob; nullglob="$?"     # checks to see if nullglob is off
  (( nullglob )) && shopt -s nullglob  # if nullglob was off, turn it on
(( verbose )) && printf '[verbose] %s\n' "$(shopt nullglob)"

##  unset cktorrent ## might not be necessary if this is defined as a local...
(( verbose )) && printf '[verbose] $linked: %s\n' "$linked"
  linkedd="$linked/$d"
  if [[ ! -d "$linkedd" ]]; then # [[ ! -d "$linked/$d" ]] && mkdir "$linked/$d"
    mkdir "$linkedd"
    printf '\nDirectory should exist: \n'
#    eza -la -sold --no-user -r "$linked/$d" -d
      eza -dla --no-user "$linked/$d" || { printf '\nError, the linked directory does not exist!\nInvestigate. (return 1)'; return 1; }
  else
    files=( "$linked/$d/"* )
(( verbose )) && { printf '[verbose] Array ${files[@]}:\n'; read -rp "$(printf '[verbose]  %s\n' "${files[@]}")"; }
    if [[ "$files" ]]; then
      printf '\n%sContents of %s/%s:%s\n' "$boldred" "$linked" "$d" "$tput0"
      eza --no-user -glbaa "$linked/$d"
      for file in "${files[@]}"; do
        if ! [[ -w "$file" ]]; then
           nowrite=1
           (( verbose )) && printf '[verbose] Unwritable: %s\n' "$(eza -la "$file")"
        else
           (( verbose )) && printf '[verbose] Writeable: %s\n' "$(eza -la "$file")"
        fi
      done
      printf \\n
      cktorrent="$(eza --color=always /library/torrent/"$d.torrent" 2>/dev/null)"
      [[ "$cktorrent" ]] && printf '\n%sTorrent exists:%s\n%s\n\n' "$boldred" "$tput0" "$cktorrent"
      confirm -Y "${boldred}Overwrite existing files in linked directory?$tput0" || { printf '\nNot overwriting existing files.\nExiting. (return 1)\n\n'; return 1; }
(( verbose )) && { printf '[verbose] $linkedd: %s\n' "$linkedd"; read -rp "[verbose] $(eza --color=always -glad "$linkedd")"; }
      if (( nowrite )) && { (( yes)) || confirm -Y "\n\n${boldred}Files in linked directory (\$linkedd) unwriteable! \n Change permissions?${tput0}"; }; then
        { sudo chown -R $USER:media "$linkedd" && sudo chmod -R g+w "$linkedd" &&
          { eza --color=always -glad "$linkedd"; (( verbose )) && read -rp "[verbose] $(printf '\nPermissions changed successfully! \n\n')" ||
            printf '\nPermissions changed successfully! \n\n';
          } ||
          { printf 'Unable to get write access to %s.  Investigate. (return 1)\n\n' "$linkedd"; return 1;
          };
        }
      fi
    else
      printf '\nDirectory should exist: \n'
      eza -glad --no-user "$linked/$d" || { printf '\nError, the linked directory does not exist!\nInvestigate. (return 1)'; return 1; }
      printf '\nAnd be empty:\n'
      eza --no-user -glbaa "$linked/$d"
    fi
  fi
  (( nullglob )) && shopt -u nullglob  # if nullglob was off before this block, turn it back off

  printline "\n MediaInfo of audiobook as found \n"

  t="${t% (*}"; [[ "$t" = *\:* ]] && t="${t%%:*}"
  [[ "$t" = *\[TTC\]* ]] && t="${t% \[TTC\]*}"
  [[ "$t" = \[* ]] && t="${t#*\] }"
  [[ "$t" = *\] ]] && t="${t% \[*}"
  it="$iton$t$itoff"
# mediainfo "$1"/*\ --\ Audiobook.opus
  audiobookopus=( "$1"/*\ --\ Audiobook.opus )
  [[ "$audiobookopus" ]] && mediainfo "$1"/*\ --\ Audiobook.opus|head -n$(($(mediainfo "$1"/*\ --\ Audiobook.opus |\grep -En Menu|cut -f1 -d:) - 1 ))

#  if { (( yes )) || confirm -Y "${boldred}Set book metadata from ABS metadata.json?$tput0"; }; then
#    (( verbose )) &&
#      { printline "\n Calling bookmetadata --verbose \n";
#        { (( YES )) && YES=1 bookmetadata --verbose "$1" || bookmetadata --verbose "$1"; } ||
#        return 1; } ||
#      { printline "\n Calling bookmetadata \n";
#        { (( YES )) && YES=1 bookmetadata "$1" || bookmetadata "$1"; } || return 1; }
#  fi

  if { (( yes )) || confirm -Y "${boldred}Set book metadata from ABS metadata.json?$tput0"; }; then
    bookmetadatacmd=( bookmetadata )
    (( verbose )) && bookmetadatacmd+=( --verbose )
    { (( YES )) && bookmetadatacmd=( env YES=1 "${bookmetadatacmd[@]}" ); } ||
    { (( yes )) && bookmetadatacmd=( env yes=1 "${bookmetadatacmd[@]}" ); }
    bookmetadatacmd+=( "$1" )

#    printline "\n Calling ${bookmetadatacmd[*]} \n"
    printline "\n Calling bookmetadata \n"
    (( verbose )) && printf '${bookmetadatacmd[*]}:\n%s\n\n' "${bookmetadatacmd[*]}"
    "${bookmetadatacmd[@]}" || return 1
  fi



  mediainfo "$1"/*\ --\ Audiobook.opus #|head -n$(($(mi "$1"/*\ --\ Audiobook.opus |\grep -En Menu|cut -f1 -d:) - 1 ))

# jq -r '.description | gsub("<p>"; ""; "g") | gsub("</p>"; "\n\n"; "g") | gsub("<br>"; "\n"; "g")' metadata.json

printf '%sChapter index from metadata.json:%s\n' "$boldred" "$tput0"

  jq -r '.chapters[] | "\(.start) \(.title)"' metadata.json | while read -r start title; do   printf "%-42s : %s\n" "$(sec2sex "$start")" "$title"; done

printline "\n Comparing indices... \n"

printf 'Comparing the chapter index between metadata.json and mediainfo %s -- Audiobook.opus\n\n' "$it"

#hr2 "Comparing indices..."

# From mediainfo
unset miarray; declare -A miarray
#while IFS= read -r line; do
#  [[ $line =~ ^([0-9:.]+)\:\=+(.+) ]] && miarray["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
#done < <(mediainfo --Output=JSON "$t"\ --\ Audiobook.opus|jq -r '
#  .media.track[]
#  | select(.["@type"] == "Menu")
#  | .extra
#  | to_entries[]
#  | "\(.key | ltrimstr("_") | gsub("_"; ":"; "g"))=\(.value)"
#')

while IFS= read -r line; do
  [[ $line =~ ^([0-9:.]+)\=+(.+) ]] && miarray["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
done < <(mediainfo --Output=JSON "$t -- Audiobook.opus" | jq -r '
  .media.track[]
  | select(.["@type"] == "Menu")
  | .extra
  | to_entries[]
  | "\(.key
       | ltrimstr("_")
       | rtrimstr("_")
       | gsub("_"; ":"; "g")
       | sub(":[^:]*$"; "")
     )=\(.value)"
')


# From metaarray
unset metaarray; declare -A metaarray
while IFS= read -r start && IFS= read -r title; do   metaarray["$start"]="$title"; done < <(
  jq -r '.chapters[] | "\(.start)\n\(.title)"' metadata.json |
  while IFS= read -r start && IFS= read -r title; do
    start="$(sec2sex "$start")"
#    printf '%s\n%s\n' "${start/./:}" "$title"  #going to remove the miliseconds instead
    printf '%s\n%s\n' "${start%.*}" "$title"  #going to remove the miliseconds instead
  done
)

## Compare idices
  unset ec1 ec2
  for k in "${!miarray[@]}"; do
    [[ ${metaarray[$k]+"key exists"} ]] || { printf '%sMissing in "${metaarray[@]}": %s%s\n' "$yellow" "$tput0" "$k"; ec1=1; break; }
    [[ ${miarray[$k]% } == "${metaarray[$k]}" ]] || { printf '%sMismatch at: %s%s\n%s' "$yellow" "$tput0" "$k"; ec1=1; break; }
  done
  for k in "${!metaarray[@]}"; do
    [[ ${miarray[$k]+"key exists"} ]] || { printf '%sMissing in "${mediainfo[@]}": %s%s\n' "$yellow" "$tput0" "$k"; ec2=1; break; }
  done

## Reindex if the compare fails




## why the fuck is this cd "$1" and then cd -??
## this does not make sense on the surface of it.
## commenting out 2025-05-20T08:01-04:00
## remove after reasonable time




  if (( ec1 || ec2 )) && { (( YES )) || confirm -y "\n${boldred}Reindex $it?$white"; }; then
#    startPWD="$PWD"
#    cd "$1"
#    middlePWD="$PWD"
#    /home/bvargo/bin/gits/indexopus/indexopus-2 --reindex=metadata.json -y
    indexopus --reindex=metadata.json -y
#    cd - >/dev/null
#    endPWD="$PWD"
#    printf %s\\n%s\\n "$startPWD" "$middlePWD"
#    read -rp "$endPWD"
  else
    printf '\nIndex of metadata.json matches output of mediainfo for %s -- Audiobook.opus\n\n' "$it"
  fi

  printline "\n Addressing cover files and embedding cover \n"
  allcovers=( *.jpg )
  if (( "${#allcovers[@]}" )) && [[ "${allcovers[0]}" != "*.jpg" ]]; then
## Moving cover files around as necessary
  cover="$t -- Cover 01.jpg"
  icover="$it -- Cover 01.jpg"
  abscover="cover.jpg"
  printf 'Directory listing of \n%s/*jpg: \n' "$1"
#  eza -la --no-user -sold -r "$1"/*jpg
  eza --no-user -glB --color=always *jpg
  printf \\n
  unset mvcover
  ## Check to see if cover.jpg and <title> -- Cover 01.jpg exist
  ## remove cover.jpg if it's the same size as <title> -- Cover 01.jpg
  if [[ -f "$1/cover.jpg" ]] && [[ -f "$1/$cover" ]]; then
    mvcover=1
    if (( $(stat -c %s "$1/$cover") == $(stat -c %s "cover.jpg") )); then
      rm "$1/$abscover"
    else  ## this assumes that cover.jpg is always from ABS!  Might not be valid.
      ## move existing <title> -- Cover 01.jpg to first available cover number < 10
      for (( cn=2; cn<=10; cn++ )); do
        (( cn==10 )) && { printf '\nError: "%s -- Cover {01..09}.jpg" exist!\nExiting rename for loop!\nInvestigate. (return 1)' "$it"; return 1; }
        [[ ! -f "$1/$t -- Cover 0$cn.jpg" ]] &&
          { mv "$1/$cover" "$1/$t -- Cover 0$cn.jpg"; break; }
      done
      mv -n "$1/$abscover" "$1/$cover" ||
        { printf '\nmv cover.jpg to "%s -- Cover 01.jpg" failed!\nInvestigate. (return 1)\n\n' "$it";
          return 1; }
    fi
  elif [[ -f "$1/$abscover" ]]; then
    mvcover=1
    mv -n "$1/$abscover" "$1/$cover" ||
      { printf '\nmv %s to "%s" failed!\nInvestigate. (return 1)\n\n' "$abscover" "$icover";
        return 1; }
  fi
  ## Check to see if <title> -- Cover 01.jpg and <title> -- Cover.jpg exist
  ## It is possible that the dir had both "<title> -- Cover 01.jpg" and "<title> -- Cover.jpg"
  ## there should be a <title> -- Cover 01.jpg by now; first check to see if the sizes match
  if [[ -f "$1/$t -- Cover.jpg" ]] &&
    (( $(stat -c %s "$1/$t -- Cover.jpg") == $(stat -c %s "$1/$cover") )); then
  ## and delete if they do
      mvcover=1
      rm "$t -- Cover.jpg"
  elif [[ -f "$1/$t -- Cover.jpg" ]]; then
  ## move it if they don't
    mvcover=1
    for (( cn=2; cn<=10; cn++ )); do
      (( cn==10 )) && { printf '\nError: "%s -- Cover {01..09}.jpg" exist!\nExiting rename for loop!\n' "$t"; break; }
      [[ ! -f "$t -- Cover 0$cn.jpg" ]] && { mv "$t -- Cover.jpg" "$t -- Cover 0$cn.jpg"; break; }
    done
  fi
  (( mvcover )) && { printf '\nCover files were moved or deleted; review changes:\n'; eza -glB --color=always *jpg; { (( yes )) || confirm -y "\n${boldred}Continue?${tput0}"; } || { printf 'Exiting... (return 1)\n\n'; return 1; }; }
(( verbose )) && read -rp "$cover " temp
#  abscover="$1/$abscover"
#  if [[ ! -f "$1/$cover" ]] && [[ -f "$abscover" ]]; then
#    printf '%s/%s does not exist.\n' "$1" "$cover"
#    mediainfo "$abscover" --Inform="Image;$abscover:\n%Height% × %Width%\n"
#    confirm -y "mv $abscover $1/$icover: " && mv "$abscover" "$1/$cover"
#  fi

## Attaching cover...
## checking to see if there's a cover attached:
  w=$(mediainfo --Inform="Image;%Width%" "$1/$cover")
  h=$(mediainfo --Inform="Image;%Height%" "$1/$cover")
  (( w > h )) && largest="$w" || largest="$h"
  unset embedcover embeddef
  (( w == 2400 && h == 2400 )) && embedcover=1 &&
    printf 'Cover is 2400×2400 — likely Audible default. Skipping embed prompt.\n'

  printf '\nLooking for attached cover:\n'
  mediainfo "$1/$t -- Audiobook.opus" | \grep --color=always -iE '^Cover[[:space:]]+:'
  ec1="$?"
  mediainfo "$1/$t -- Audiobook.opus" | \grep --color=always -A10 Image

#  ffprobe "$1/$t -- Audiobook.opus" 2>&1 | \grep --color=always Cover
#  ffprobe "$1/$t -- Audiobook.opus" 2>&1 | { \grep --color=always 'Stream #0:1' -A2 || \grep --color=always Cover; }

  ffprobe file:"$1/$t -- Audiobook.opus" 2>&1| \grep -E --color=always -A 2 Stream\ #0\:1\|Cover\ 
  ec2="$?"
  if (( ec1 && ec2 )); then
    printf '%sNo cover information from mediainfo and ffprobe!\n%s' "$yellow" "$white"
  elif ! (( ec2 )); then
    printf 'Cover information found by ffprobe; inspect output!\n'
    embeddef="-n"
    embedcover=0
  fi

(( verbose )) && printf '$1: %s\n$cover: %s\n\n' "$1" "$cover"
## this works, but doesn't show the whole context.  adding the |$ to the regex adds everything (as would -C <large number>), however the regex is more restrictive... also it does not allow for changing the color.

##  mediainfo "$1/$cover" | grep --color=always -E '^(Width|Height)[[:space:]]+:[[:space:]]+[0-9]+ pixels'

#  printf '\nFound cover to embed: %s%s%s pixles:\n\n' "$red" "$(mediainfo "$1/$cover" --Inform="Image;\"$cover\":\n%Height% × %Width%\n")" "$white"
 printf '\nFound cover to embed:\n%s%s%s\n\n' "$red" "$cover" "$white"

## regular red: GREP_COLORS='mt=1;31'

 mediainfo "$1/$cover" | GREP_COLORS='mt=38;5;9' grep --color=always -E '^(Width|Height).*|$'|grep --color=always -Ev '^General|^Complete\ name[[:space:]]+\:*'


  if (( embedcover )) || (( yes )) || confirm "${embeddef:--y}" "${red}Embed $icover?$tput0"; then

(( verbose )) && eza -glB --color=always "$cover"
(( verbose )) && { printf \\n; read -rp "$1/$cover" temp; }

#defults for cover image:
  scale=1200
  maxcover=506000
# maxcover=432942
## moving this up to the check for an embedded cover...
#  w=$(mediainfo --Inform="Image;%Width%" "$1/$cover")
#  h=$(mediainfo --Inform="Image;%Height%" "$1/$cover")
#  (( w > h )) && largest="$w" || largest="$h"

  tmpimg=$(mktemp --suffix=.jpg)
  cp "$1/$cover" "$tmpimg"

(( verbose )) && { printf %s\\n "$tmpimg"; mediainfo "$tmpimg"; }

  [[ -f "$1/$t -- Audiobook-2.opus" ]] &&
    {
     printf '%s\nTemporary output opus file exists:\n%s  %s -- Audiobook-2.opus\n\n' "$red" "$white" "$1/$t"
     if confirm -y "${red}rm $1/$t -- Audiobook-2.opus?$white"; then
       rm "$1/$t -- Audiobook-2.opus"
     else
       printf 'Temp output opus file exists; investigate\n.Exiting (return 1)\n'
       return 1
     fi
    }

#    if (( $(mediainfo --Inform="Image;%Height%" "$1/$cover") > 1200 || $(mediainfo --Inform="Image;%Width%" "$1/$cover") > 1200 )); then
#      convert "$1/$cover" -resize 1200x1200 jpg:- | \
#      opustags -o "$1/$t -- Audiobook-2.opus" --set-cover - "$1/$t -- Audiobook.opus"
#    else
#      opustags -o "$1/$t -- Audiobook-2.opus" --set-cover "$cover" "$1/$t -- Audiobook.opus"
#    fi

#  while :; do
#    if (( largest < scale )); then
#      tmpimg="$1/$cover"
#      scale="$largest"
#(( verbose )) && read -rp "$tmpimg"
#    elif (( w >= h )); then
#      convert "$1/$cover" -resize "${scale}x" -strip -quality 85 "$tmpimg"
#    else
#      convert "$1/$cover" -resize "x${scale}" -strip -quality 85 "$tmpimg"
#    fi
#
#    size=$(stat -c %s "$tmpimg"); echo "${scale}: $size"
#(( verbose )) && read -rp "${scale}: $size"
#    if (( size < maxcover )); then
#      opustags -o "$1/$t -- Audiobook-2.opus" --set-cover "$tmpimg" "$1/$t -- Audiobook.opus"
#      ec="$?"
#      (( ec )) && { printf 'opustags reported an unknown error embedding %s, see above.\nexiting (return 1)' "$tmpimg"; return 1; }
#      break
## 2025-05-18T21:37-04:00
## mediainfo now does not report conformance erros for large images so there was never a problem
## and this check is unnecessary.  If 1200x1200 is the starting size and it gets scaled down further
## that's fine.  this can go in a couple weeks.
##      mediainfo "$1/$t -- Audiobook-2.opus" | grep -q 'Conformance errors'
##      ec="$?"
##      if (( ec == 1 )); then
##        break
##      elif (( ec == 0 )); then
##        printf 'Image still larger than max page size\nContinue resizing...\n'
##      elif (( ec != 0 )); then
##        printf 'Error checking conformance\n' >&2
##        info=$(mediainfo "$1/$t -- Audiobook-2.opus")
##        printf %s\\n "$info"
##        grep 'Conformance errors' <<< "$info"
##        return $ec
##      fi
#    fi
#    (( scale -= 50 ))
#    (( scale <= 0 )) && {     echo "image too large even at minimal scale" >&2;     return 1;   }
#  done


# need to delete in a couple weeks 2025-05-18T22:08-04:00

size=$((1<<30)) # 1 GiB size
(( scale > largest )) && scale="$largest"

printf 'Rescaling:\n'
printf 'pixles — bytes\n'
printf ' %s  — %s (original)\n' "${scale}" "$(stat -c %s "$tmpimg")"

until (( size < maxcover )); do

(( verbose )) && mediainfo "$tmpimg"

  (( verbose )) && read -rp "Preparing: $tmpimg"

  if (( w >= h )); then
    convert "$1/$cover" -resize "${scale}x" -strip -quality 85 "$tmpimg"
  else
    convert "$1/$cover" -resize "x${scale}" -strip -quality 85 "$tmpimg"
  fi

  size=$(stat -c %s "$tmpimg")
  printf ' %s  — %s\n' "${scale}" "$size"
  (( verbose )) && read -rp "${scale}: $size"

  (( scale -= 50 ))
  (( scale <= 0 )) && {
    echo "image too large even at minimal scale" >&2
    return 1
  }
done

printf \\n

(( verbose )) && { printf 'Adding %s to audiobook\n'; mediainfo "$tmpimg"; }

opustags -o "$1/$t -- Audiobook-2.opus" --set-cover "$tmpimg" "$1/$t -- Audiobook.opus"
ec=$?
if (( ec )); then
  printf 'opustags reported an unknown error embedding %s, see above.\n' "$tmpimg" >&2
  return "$ec"
fi


    ckcoverout="$(mediainfo "$1/$t -- Audiobook-2.opus" | \grep --color=always -iE '^Cover[[:space:]]+:\ Yes')"
    ec1="$?"
    ! (( ec1 )) && printf 'Audiobook contains embedded cover image:\n\n%s\n' "$ckcoverout"
    mediainfo "$1/$t -- Audiobook-2.opus" | \grep --color=always -A10 Image
#    ffprobe "$1/$t -- Audiobook-2.opus" 2>&1| \grep --color=always Cover
    printf '\nffprobe output:\n'
    ffprobe file:"$1/$t -- Audiobook-2.opus" 2>&1| \grep -E --color=always -A 2 Stream\ #0\:1\|Cover
    ec2="$?"
    (( verbose )) && printf 'yes= %s\nec1= %s\nec2= %s\n' "$yes" "$ec1" "$ec2"
    { (( yes && ! ec1 && ! ec2 )) || confirm -y "\n${boldred}mv '$t -- Audiobook-2.opus' '$t -- Audiobook.opus'?$white"; } && mv "$1/$t -- Audiobook-2.opus" "$1/$t -- Audiobook.opus"
  fi

  if [[ -f "$t -- Cover.jpg" ]] && (( $(stat -c %s "$t -- Cover.jpg") == $(stat -c %s "$cover") )); then
    rm "$t -- Cover.jpg"
  elif [[ -f "$t -- Cover.jpg" ]]; then
    for (( cn=2; cn<=10; cn++ )); do
      (( cn==10 )) && { printf '\nError: "%s -- Cover {01..09}.jpg exist!\nExiting rename for loop!\n' "$t"; break; }
      [[ ! -f "$t -- Cover 0$cn.jpg" ]] && { mv "$t -- Cover.jpg" "$t -- Cover 0$cn.jpg"; break; }
    done
  fi

fi ### to checking if .jpg files exist?


  printf '\nCheck cover, etc., before symlinking:\n'
  eza -lag -sold -r --no-user "$1"
#  read -p "..."
  { (( yes )) || confirm -Y "$boldred...continue?$tput0"; } || return 1
  printf \\n
#  pause "$1/$t* linked $d"
  ln -sf "$1/$t"* "$linked/$d"
  cd "$linked/$d"
  printf '\npwd:\n%s\n\ncontents:\n' "$(pwd)"
  eza --no-user -la -sold -r
  printf \\nMoving\ opus\ to\ ogg...\\n
#  read -p "Move opus to ogg? "
#  printf \\n
  for i in *.opus; do
    mv "$i" "${i%.opus}.ogg"
  done
  for i in *\?*; do
    mv "$i" "${i//\?/ }"
  done 2>/dev/null
  for i in *\\*; do
    mv "$i" "${i//\\/_}"
  done 2>/dev/null
  ebook=("$PWD"/*\ --\ eBook*.*)
  if [[ -L "${ebook[0]}" ]] && printf '\neBook found!\n%s\n' "$(eza -la --no-user *\ --\ eBook*.*)" &&       { (( yes )) || confirm -y "\n${boldred}Remove eBook?$tput0"; };  then
    rm *\ --\ eBook*.* && printf '\neBook removed.\n'
  fi
  webp=("$PWD"/*.webp)
  if [[ -L "${webp[0]}" ]] &&
   printf '\nwebp found!\n%s\n' "$(eza -la --no-user *.webp)" &&
   confirm  -y "Remove *.webp? "; then
    rm *.webp
  fi
  opf=("$PWD"/*.opf)
  if [[ -L "${opf[0]}" ]] &&
   printf '\nopf found!\n%s\n' "$(eza -la --no-user *.opf)" &&
   confirm -y "Remove *.opf? "; then
    rm *.opf
  fi

  parts=("$PWD"/*.part)
  if [[ -L "${parts[0]}" ]] && printf '\nFound .part files!\n%s\n' "$(eza -la --no-user *.part)" &&       { (( yes )) || confirm -y "\n${boldred}Remove .part files?$tput0"; };  then

    rm *.part && printf '\nThe .part files removed.\n'
  fi


  [[ -L wget-log ]] && rm wget-log

## this is not actually needed since the torrent's being generated automatically.
## also, xclip doesn't work even with trusted
## also, I'd rather have the final mediainfo / genre & tags output xclipped anyway.
#  (( SSHTRUSTED )) && pwd|xclip || printf '\nCannot use xclip; copy the folder location manually...\n'

  printf '\nCheck files before returning to swd:\n'
  eza -la -sold -r --no-user
#  read -p "..."
  { (( yes )) || confirm -d y "$red...continue?$tput0"; } || return 1
#  torrentfile="/library/torrent/${PWD##*/}.torrent"  #to be removed: the directory should be $d
#  torrentfile="/library/torrent/$d.torrent"          #this is defined when the directory is defined
  [[ "$cktorrent" ]] && { { (( YES )) || confirm -y "${cktorrent[@]} exists.\nContinue to create torrent?"; } || return 1; }
  transmission-create -p -t "$tracker" -o "$torrentfile" "$(pwd)"
#  { cd "$linked/$d; mediainfo $t -- Audiobook.ogg"; }
#  deluge-console "connect $delugehost:$delugeport $delugeuser $delugepass; add -p $linked $torrentfile"
  chmod go+r,g+w "$torrentfile"
  chgrp media "$torrentfile"
  [[ "$torrentfile" = *\;* ]] && cp "$torrentfile" "${torrentfile//\;/_}" &&
    torrentfile="${torrentfile//\;/_}" && { (( yes )) || read -rp "torrent file copied to $torrentfile as deluge-console cannot accpet semicolons in file names!"; }
  deluge-console "connect $delugehost:$delugeport $delugeuser $delugepass; add -p ${linked@Q} ${torrentfile@Q}"
  printf \\n


  printdescrip

  printline "\n Returning to starting working directory "
  printf '\nLeaving: \n%s\n' "$(pwd)"
  printf '\nReturning to %s\n' "$swd"
  cd - > /dev/null

  parts=( *.part )
  [[ -f "${parts[0]}" ]] && \rm *.part
  readarray -t partnames < <(jq -r '.chapters[].title' metadata.json)
  for i in "${partnames[@]}"; do [[ "$i" = *\/* ]] && i="${i//\//\\}"; touch "$i.part"; done

  confirm -y "$red${blink}Run updatetracker function?$tput0" && updatetracker || return 0

  printline "\n ${FUNCNAME[0]} finished \n\n"
  return "$?"
}
##--> mklnbook() <--################################################################

updatetracker(){
  delugecreds -h gigabyte -t mam
  torrent="${1:-$(pwd)}"
  if [[ -d "$torrent" ]]; then
    if [[ "$torrent" = /library/books/* ]]; then
      torrent="${torrent#'/library/books/'}"
      torrent="${torrent#*\/}"
      torrent="${torrent/\// -- }"
      torrent="${torrent//:/=}"
      torrent="${torrent//;/_}"
    fi
    ## torrent should be here:
    torrent="/library/torrent/${torrent##*\/}.torrent"
(( verbose )) && printf %s\\n "$torrent"
  else
    torrent="$(realpath "$1")"
  fi
  [[ "$torrent" != *.torrent || ! -f "$torrent" ]] && printf '\ntorrent "%s" not valid!\n\n' "$torrent" && return
  hash="$(transmission-show "$torrent" | \grep -oP 'Hash v1: \K.*')"
  printf 'torrent:\n%s\nhash:\n%s\ndeluge out:\n' "$torrent" "$hash"
  deluge-console "connect $delugehost:$delugeport $delugeuser $delugepass; update_tracker ${hash@Q}"
}
##--> updatetracker() <--################################################################
