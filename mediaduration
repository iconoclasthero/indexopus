#!/bin/bash
# nb: the swp file that editscript relies on is provided by nano
# <konsolebox_> iconoclast_hero: 1) Yes that's one way to do it but bash doesn't support decimals so checking if the result is > 0 would be more complicated. 2) You can use printf and pipe it back to Perl.
# <konsolebox_> iconoclast_hero: You can also just do everything in Perl: ... | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t += $1); END { if ($t > 0) { printf "%02d:%02d:%02d\n", $t/3600, $t/60%60, $t%60; }; }'
#trap read DEBUG
#set -x
finddur(){
    IFS=':'; tdurs=( $(find -type f -iname "*.$1" -print0 2>/dev/null |
                       xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null |
                       perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' |
                       tail -n 1)
                   )
    [[ "${tdurs[0]}" ]] && tdur=$(( 10#${tdurs[0]} + 10#${tdurs[1]} + 10#${tdurs[2]} )) || tdur=0
    [[ "$tdur" -gt 0 ]] && [[ "$1" != opus ]] &&
      printf 'Duration of .%s files : %s\n' "$1" "${tdurs[*]}" ||
      printf 'Duration of .%s files: %s\n' "$1" "${tdurs[*]}"
}

. /usr/local/bin/editscript

readarray exts < <(find . -type f 2>/dev/null | sed -rn 's|.*/[^/]+\.([^/.]+)$|\1|p' | sort -u)

if [[ -n "$1" && "$1" =~ (mp3|m4(a|b)|flac|ogg|mp4|avi|shn|wav|opus) ]]; then
  find -type f -name "*.$1" -print0 2>/dev/null | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
else
 if [[ -n "$1" &&  -d "$1" ]]; then
   cd "$1" || { printf '[ERROR] Directory specified on commandline was not accessible, investigate.\nexit 1\n\n'; exit 1; }
 fi

#mp3
 [[ "${exts[@]}" =~ mp3 ]] && finddur mp3

#m4a
 [[ "${exts[@]}" =~ m4a ]] && finddur m4a
#m4b
 [[ "${exts[@]}" =~ m4b ]] && finddur m4b

#flac
[[ "${exts[@]}" =~ flac ]] && finddur flac

#ogg
[[ "${exts[@]}" =~ ogg ]] && finddur ogg

#mp4
 [[ "${exts[@]}" =~ mp4 ]] && finddur mp4 #printf "Duration of .mp4 files: " && find -type f -iname "*.mp4" -print0 2>/dev/null | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1

#avi
 [[ "${exts[@]}" =~ avi ]] && finddur avi #printf "Duration of .avi files: " && find -type f -iname "*.avi" -print0 2>/dev/null | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1

#shn -- ffmpeg doesn't seem to work with this...
 [[ "${exts[@]}" =~ shn ]] && printf "Duration of .shn files: " && find -type f -iname "*.shn" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
# [[ "${exts[@]}" =~ shn ]] && printf "Duration of .shn files: ffmpeg" && find -type f -iname "*.shn" -print0 | while IFS= read -r -d '' file; do ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null; done | awk '{s+=$1} END {printf "%02d:%02d:%02d\n",s/3600,s%3600/60,s%60}'

#wav -- ffmpeg usually has trouble with this
 [[ "${exts[@]}" =~ wav ]] && finddur wav #printf "Duration of .wav files: " && find -type f -iname "*.wav" -print0 2>/dev/null | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1

 [[ "${exts[@]}" =~ wav ]] && printf "Duration of .wav files: " && find -type f -iname "*.wav" -print0 2>/dev/null | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1

 [[ "${exts[@]}" =~ wav ]] && printf "Duration of .wav files: " && find -type f -iname "*.wav" -print0 | while IFS= read -r -d '' file; do ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null; done | awk '{s+=$1} END {printf "%02d:%02d:%02d\n",s/3600,s%3600/60,s%60}'

#opus
 [[ "${exts[@]}" =~ opus ]] && finddur opus

fi

exit
