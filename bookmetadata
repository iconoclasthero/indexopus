#!/bin/bash
. /usr/local/bin/editscript

exarray(){
local output delim
delim="$1"
echo "$delim"
shift
output="$(IFS="$delim"; printf %s "$*")"
output="${output//"$delim"/"$delim" }"
printf %s\\n "$output"
}


exarray(){
  local i delim output
  delim="$1"
  shift
  output="$1"
  shift
  for i in "$@"; do
    output+="$delim$i"
  done
  printf '%s\n' "$output"
}


striptags(){
  local output="$1" mp4grep mp4opustags chaptag tags ck4tags args
  [[ ! "$removemp4tags" ]] &&
    removemp4tags=("major_brand" "minor_version" "compatible_brands" "encoded_by" 'OverDrive MediaMarkers' "handler_name" "vendor_id" "ITUNPGAP" "iTunSMPB" "iTunNORM" "CUESHEET" "json64" "Track name")

##pause "$(printf %s\\n "${removemp4tags[@]}")"
#
#
##this works, why won't it work in the array?
## opustags -d "OverDrive MediaMarkers" -i "$output"
#  if [[ "$(opustags "$output")" = *CHAPTER* ]]
#    then
#      printf '\n%s%s%s contains existing tags; removing...%s\n' "$relipsis" "$bold" "$title" "$tput0"
#      tags=( $(opustags "$output") )
#      tags=( $(printf -- '-d%s\n' "${tags[@]%=*}"|\grep CHAPTER|sort -u) )
#      printf '\n%smediainfo of existing %s:%s\n' "$relipsis" "$output" "$tput0"
#      mediainfo "$output"
#      printf '\n%sremoving exiting CHAPTER tags with opustags...%s\n\n' "$relipsis" "$tput0"
#      opustags "${tags[@]}" -i "$output"
#      ck4tags=( "$(opustags "$output" | grep --color=always -i chapter)" ) &&
#      printf 'Error!\nCHAPTER tags still present in opus file.\n%s' "${ck4tags[@]}" &&
#      exit
#  else
#    printf '%smediainfo of existing %s:%s\n' "$relipsis" "$output" "$tput0"
#    mediainfo "$output"
#  fi
#
#  while read -r chaptag
#    do
#      args+=(-a "$chaptag"\ )
#    done < "$tmp/opusindex"
#
#  opustags -i "$output" "${args[@]}"
#  printf '%sChapter info added...\n%s' "$relipsis" "$tput0"
  printf '%sStripping MP4 tags%s\n%s' "$relipsis" "$relipsis" "$tput0"

#  [[ "$rmmatch" != 'true' ]] &&    ####why the fuck is this here?
  mp4grep="$(IFS=\|; echo "${removemp4tags[*]}")"

#  This is method one to remove the unwanted mp4 tags:
  readarray -t mp4opustags -- < <(printf -- '-d\n%s\n' "${removemp4tags[@]}")
  mp4opustags+=(-i "$output")
  [[ $( opustags "$output" |grep -E "$mp4grep" ) ]] && opustags "${mp4opustags[@]}"

#  This is method two to remove the unwanted mp4 tags...
#  Both of them work, but I couldn't get the first one to work so I wrote this one
#  Keeping for reference for a while since this is such a fucking pain in the ass.

  if [[ $( opustags "$output" |grep -E "$mp4grep" ) ]]; then
    for i in "${removemp4tags[@]}"; do
      mp4args+=(-d "$i")
    done

    mp4args+=(-i "$output")    # Should I also use readarray here?  difference?
    opustags "${mp4argss[@]}"
  fi

}







[[ "$1" = @(-v|--verbose) ]] && verbose=1 && shift
bookdir="$(realpath "$1")"
#[[ "$1" = '.' ]] && bookdir="$(realpath .)"

(( verbose )) && pause "bookdir: $bookdir"
title="${bookdir##*\/}"
title="${title% \(*}"
title="${title% \[TTC\]*}"
title="${title%%:*}"

if [[ "$title" =~ ^\[.+\] ]]; then
  printf '\nWARN: Title from directory begins with "%s" which will be stripped!\n\n' "${title%%\]*}]"
  pause "Press any key to continue or ^C to exit"
  title="${title#*\] }"
fi

(( verbose )) && pause "title: $title"

opustitle=("$bookdir"/*.opus)
opustitle="${opustitle[*]##*\/}"
opustitle="${opustitle% -- Audiobook.opus}"

[[ "$title" != "$opustitle" ]] &&
  { printf '\nTitle from directory name does not match the title of the opus file:\n$title [from directory name]: %s\n$opustitle [from .opus name]: %s\nInvestigate (exit 1)\n\n' "$title" "$opustitle"; \
  exit 1; }

(( verbose )) && pause "Reveiew titles:"
printf '\n$title [from directory name]: %s\n$opustitle [from .opus file name]: %s\n\n' "$title" "$opustitle"

metadata="$bookdir/metadata.json"
book="$bookdir/$title -- Audiobook.opus"
(( verbose )) && pause "$book"

[[ "$book" = *\*Audiobook.opus ]] && printf 'Audiobook does not exist!\nCheck %s.\nexit 1\n\n' "$bookdir" && exit 1

title="$(jq -r '.title' "$metadata")"
subtitle="$(jq -r '.subtitle' "$metadata")"
readarray -t authors < <(jq -r '.authors[]' "$metadata")
artist="$(jq -r '.authors | join(", ")' "$metadata")"
album_artist="$artist"
if [[ "$subtitle" != null ]]; then
  album="$title: $subtitle"
  TIT3="$subtitle"
else
  album="$title"
  unset subtitle TIT3
fi
readarray -t genres < <(jq -r '.genres[]' "$metadata")
series="$(jq -r '.series | join ("; ")' "$metadata")"
genre="$(jq -r '.genres | join("; ")' "$metadata")"
date="$(jq -r '.publishedYear' "$metadata")"
description="$(jq -r '.description' "$metadata")"
# replaced by the jq below [[ "$descrption" = \<p\>* ]] && description="${description#\<p\>}" && description="${descrption//\<\/p\>}"

# this might not be a good idea because then then the whole thing won't render properly as html...
#description="$(jq -r '
#  .description
#  | sub("<p>"; "")   # Remove only the FIRST <p>
#  | gsub("<p>"; "\n\t") # Replace remaining <p> with a tab
#  | gsub("</p>"; "")  # Strip all </p>
#' metadata.json)"

comment="$description"
#readarray -t narrators < <(jq -r '.narrators[]' "$metadata")
composer="$(jq -r '.narrators | join(", ")' "$metadata")"
copyright="$(jq -r '.publisher' "$metadata")"
publisher="$copyright"
TRACKTOTAL=1
language="$(jq -r '.language' "$metadata")"
#asin="$(jq -r '.asin' "$metadata")"
#isbn="$(jq -r '.isbn' "$metadata")"
isbn="$(jq -re '.isbn | select(. != null)' "$metadata" || unset isbn)"
asin="$(jq -re '.asin | select(. != null)' "$metadata" || unset asin)"


#printf %s\\n\\n "$description" "$title: $subtitle" "${authors[@]}" "${narrators[0]}"
#composer="$(IFS=,; printf "${narrators[*]}")"
#composer="${composer//,/, }"
#artist="$(IFS=,; echo "${authors[*]}")"
#artist="${artist//,/, }"
#artist="$( exarray ", " "${authors[@]}" )"
#artist="$(jq -r '.authors | join(", ")' "$metadata")"
#composer="$(exarray ", " "${narrators[@]}")"
#genre="$(exarray "; " "${genres[@]}")"

#printf %s\\n "$title" "$artist" "$album_artist" "$album" "$TIT3" "$genre" "$date" "$comment" "$description" "$composer" "$copyright" "$publisher" "$TRACKTOTAL" "${isbn:+$isbn}" "${asin:+$asin}"


#printf title=%s\\n "$title"
#printf artist=%s\\n "$artist"
#printf ALBUMARTIST=%s\\n "$album_artist"
#printf composer=%s\\n "$composer"
#printf album=%s\\n "$album"
#printf subtitle=%s\\n "$subtitle"
#printf TIT3=%s\\n "$TIT3"
#printf date=%s\\n "$date"
##printf copyright=%s\\n "$copyright"
#printf genre=%s\\n "$genre"
#printf DESCRIPTION=%s\\n "$description"
#printf publisher=%s\\n "$publisher"
##printf comment="$comment"
#args=("opustags")
args=(-i)
args+=("$book")
args+=("--set" "title=$title")
args+=("--set" "artist=$artist")
args+=("--set" "ALBUMARTIST=$album_artist")
args+=("--set" "composer=$composer")
args+=("--set" "album=$album")
[[ "$subtitle" ]] && args+=("--set" "subtitle=$subtitle")
[[ "$TIT3" ]] && args+=("--set" "TIT3=$TIT3")
[[ "$series" ]] && args+=("--set" "grouping=$series")
args+=("--set" "Language=English")
args+=("--set" "date=$date")
#args+=("--set" "copyright=$copyright")
args+=("--set" "genre=$genre")
args+=("--set" "DESCRIPTION=$description")
args+=("--set" "publisher=$publisher")
#args+=("--set" "comment=$comment")
#args+=("Normal Women -- Audiobook1.opus")
(( verbose )) && printf %s\\n "${args[@]}" && pause "tag? "
opustags "${args[@]}"
striptags "$book"

printf \\n
#"${args[@]}"



