#!/bin/bash
. /usr/local/bin/editscript
. $HOME/.config/indexopus.conf
. $HOME/bin/gits/indexopus/mklnbook.functions

#exarray(){
#  local output delim
#  delim="$1"
#  echo "$delim"
#  shift
#  output="$(IFS="$delim"; printf %s "$*")"
#  output="${output//"$delim"/"$delim" }"
#  printf %s\\n "$output"
#}

red="$(tput setaf 9)" #red fg
green="$(tput setaf 2)" #green fg
white="$(tput setaf 15)" #white fg
tput0="$(tput sgr0)" #reset tput changes
bold="$(tput bold)" #bold on
boldred="$(tput setaf 9 bold)"
relipsis="$red..."

exarray(){
  local i delim output
  delim="$1"
  shift
  output="$1"
  shift
  for i in "$@"; do
    output+="$delim$i"
  done
  printf '%s\n' "$output"
}


striptags(){
  local output="$1" mp4grep mp4opustags chaptag tags ck4tags args
  [[ ! "$removetags" ]] &&
  removetags=("major_brand" \
                 "minor_version" \
                 "compatible_brands" \
                 "encoded_by" \
                 "OverDrive MediaMarkers" \
                 "handler_name" \
                 "vendor_id" \
                 "ITUNPGAP" \
                 "iTunSMPB" \
                 "iTunNORM" \
                 "CUESHEET" \
                 "json64" \
                 "Track name" \
                 "engiTunSMPB" \
                 "engiTunPGAP" \
                 "engiTunNORM" \
                 "TRACKNUMBER" \
                 "tracknumber" \
                )

  printf '%sStripping unwanted tags%s\n%s' "$relipsis" "$relipsis" "$tput0"

  mp4grep="$(IFS=\|; echo "${removetags[*]}")"

#  This is method one to remove the unwanted mp4 tags:
  readarray -t mp4opustags -- < <(printf -- '-d\n%s\n' "${removetags[@]}")
  mp4opustags+=(-i "$output")
  [[ $( opustags "$output" |grep -E "$mp4grep" ) ]] && opustags "${mp4opustags[@]}"

#  This is method two to remove the unwanted mp4 tags...
#  Both of them work, but I couldn't get the first one to work so I wrote this one
#  Keeping for reference for a while since this is such a fucking pain in the ass.

  if [[ $( opustags "$output" |grep -E "$mp4grep" ) ]]; then
    for i in "${removetags[@]}"; do
      mp4args+=(-d "$i")
    done

    mp4args+=(-i "$output")    # Should I also use readarray here?  difference?
    opustags "${mp4args[@]}"
  fi

}


[[ "$1" = @(-v|--verbose) ]] && verbose=1 && shift
bookdir="$(realpath "$1")"
#[[ "$1" = '.' ]] && bookdir="$(realpath .)"

(( verbose )) && pause "bookdir: $bookdir"
title="${bookdir##*\/}"
title="${title% \(*}"
title="${title% \[TTC\]*}"
title="${title%%:*}"

if [[ "$title" =~ ^\[.+\] ]]; then
  verbose=1
#  printf '\nWARN: Title from directory begins with "%s" which will be stripped!\n\n' "${title%%\]*}]"
  printf '\nWARN: Title from directory begins with "%s"!\n\n' "${title%%\]*}]"
#  pause "Press any key to continue or ^C to exit"
  confirm "${boldred}Strip ${title%%\]*}] from linked directory title?$tput0" && title="${title#*\] }"
fi

(( verbose )) && pause "title: $title"

#bookdir="$(pwd)"
shopt -s nullglob
allopus=("$bookdir"/*opus)
opustitle=("$bookdir"/*" -- Audiobook.opus")
[[ "${allopus[*]}" != "${opustitle[*]}" ]] && opusmatch=1
if (( "${#opustitle[@]}" < 1 )); then
  printf 'No audiobook in the format of <title> -- Audiobook.opus found!\n'
    if (( opusmatch )); then
      printf '%sMultiple *.opus files found!\nUnmerged audiobook?\n\n%s' "$boldred" "$tput0"
      printf %s\\n "${allopus[@]}"
      confirm -Y "${boldred}\nMerge opus files with indexopus?$tput0" && indexopus &&
        opustitle=("$bookdir"/*" -- Audiobook.opus")  ||
        { printf '\nInvestigate (exit 1)\n'; exit 1; }
    fi
elif (( "${#opustitle[@]}" > 1 )); then
  printf 'Error: not exaclty one <title> -- Audiobook.opus file in %s:\n' "$bookdir"
  if (( opusmatch )); then
    printf 'Multiple *.opus files found!\nUnmerged audiobook?\n'; \
    printf %s\\n "${allopus[@]}"
    printf '\nInvestigate. (exit 1)\n\n'
    exit 1
  else
    printf %s\\n "${opustitle[@]}"
    printf '\nInvestigate. (exit 1)\n\n'
    exit 1
  fi
elif (( opusmatch )); then
  printf 'Error: directory contains multiple .opus files including <title> -- Audiobook.opus:\n'
  printf %s\\n "${allopus[@]}"
  printf \\n
  ! confirm "Proceed with tagging ${opustitle[*]}?" &&
    { printf 'Investigate. (exit 1)\n\n'; exit 1; }
fi

opustitle="${opustitle[*]##*\/}"
opustitle="${opustitle% -- Audiobook.opus}"

if [[ "$title" != "$opustitle" ]]; then
  strippedtitle="${title#*\] }"; strippedtitle="${strippedtitle% \[*}"
(( verbose )) && printf .%s.\\n "$strippedtitle"
  [[ "$strippedtitle" != "$opustitle" ]] &&
  { printf '\nTitle from directory name does not match the title of the opus file:\n$title [from directory name]: %s\n$opustitle [from .opus name]: %s\nInvestigate. (exit 1)\n\n' "$title" "$opustitle"; \
  exit 1; }
fi

(( verbose )) && pause "Reveiew titles:"
printf '\n$title [from directory name]: %s\n$opustitle [from .opus file name]: %s\n\n' "$title" "$opustitle"

metadata="$bookdir/metadata.json"
book="$bookdir/${strippedtitle:-title} -- Audiobook.opus"
(( verbose )) && pause "$book"

## what is this doing?? shouldn't this be a -f?
[[ "$book" = *\*Audiobook.opus ]] && printf 'Audiobook does not exist!\nCheck %s.\nexit 1\n\n' "$bookdir" && exit 1

title="$(jq -r '.title' "$metadata")"
subtitle="$(jq -r '.subtitle' "$metadata")"
readarray -t authors < <(jq -r '.authors[]' "$metadata")
#artist="$(jq -r '.authors | join(", ")' "$metadata")"
artist="$(jq -r '.authors | join("; ")' "$metadata")"
album_artist="$artist"
if [[ "$subtitle" != null ]]; then
  album="$title: $subtitle"
  TIT3="$subtitle"
else
  album="$title"
  unset subtitle TIT3
fi
genre="$(jq -r '.genres | join("; ")' "$metadata")"
readarray -t genres < <(jq -r '.genres[]' "$metadata")
series="$(jq -r '.series | join ("; ")' "$metadata")"
readarray -t mseries < <(jq -r '.series[]' "$metadata")
readarray -t tagarray < <(jq -r '.tags[]' "$metadata")
date="$(jq -r '.publishedYear' "$metadata")"
description="$(jq -r '.description' "$metadata")"
# replaced by the jq below [[ "$descrption" = \<p\>* ]] && description="${description#\<p\>}" && description="${description//<\/p>/}"

# this might not be a good idea because then then the whole thing won't render properly as html...
#description="$(jq -r '
#  .description
#  | sub("<p>"; "")   # Remove only the FIRST <p>
#  | gsub("<p>"; "\n\t") # Replace remaining <p> with a tab
#  | gsub("</p>"; "")  # Strip all </p>
#' metadata.json)"

comment="$description"
readarray -t narrators < <(jq -r '.narrators[]' "$metadata")
composer="$(jq -r '.narrators | join("; ")' "$metadata")"
copyright="$(jq -r '.publisher' "$metadata")"
publisher="$copyright"
TRACKTOTAL=1
language="$(jq -r '.language' "$metadata")"
isbn="$(jq -re '.isbn | select(. != null)' "$metadata" || unset isbn)"
asin="$(jq -re '.asin | select(. != null)' "$metadata" || unset asin)"

[[ "$language" != "English" ]] && confirm -y "The language tag is \"$language\", not \"English\"$'!'\nWould you like to set \"language=English\"?" && language="English"

args=(-i)
args+=("$book")
args+=("--set" "Title=$title")
#args+=("--set" "artist=$artist")
for i in "${authors[@]}"; do args+=("--set" "artist=$i"); done
for i in "${authors[@]}"; do args+=("--set" "Author=$i"); done
#args+=("--set" "ALBUMARTIST=$album_artist")
for i in "${authors[@]}"; do args+=("--set" "ALBUMARTIST=$i"); done
#args+=("--set" "composer=$composer")
for i in "${narrators[@]}"; do args+=("--set" "composer=$i"); done
for i in "${narrators[@]}"; do args+=("--set" "Narrator=$i"); done
args+=("--set" "album=$album")
[[ "$subtitle" ]] && args+=("--set" "Subtitle=$subtitle")
#[[ "$series" ]] && args+=("--set" "grouping=$series")
[[ "$series" ]] && for i in "${series[@]}"; do args+=("--set" "grouping=$i"); done
[[ "$series" ]] && for i in "${series[@]}"; do args+=("--set" "Series=$i"); done
args+=("--set" "Language=$language")
args+=("--set" "date=$date")
#args+=("--set" "copyright=$copyright")
#args+=("--set" "genre=$genre")
for i in "${genres[@]}"; do args+=("--set" "genre=$i"); done
args+=("--set" "DESCRIPTION=$description")
args+=("--set" "publisher=$publisher")
for i in "${tagarray[@]}"; do args+=("--set" "Tags=$i"); done
#args+=("--set" "comment=$comment")

[[ "$series" ]] && for i in "${series[@]}"; do args+=("--set" "TIT1=$i"); done
args+=("--set" "TIT2=$title")
[[ "$TIT3" ]] && args+=("--set" "TIT3=$TIT3")

(( verbose )) && printf %s\\n "${args[@]}" && pause "tag? "
opustags "${args[@]}"

striptags "$book"

printf \\n



