#!/bin/bash

## definitions #################################################################################
shopt -s nullglob
[[ "$TERM" = screen ]] && TERM=screen.xterm-256color
[[ "$TERM" = dummy ]] && TERM=xterm-256color
export TERM

tput="$(tput sgr0)"
red="$(tput setaf 1)"
relipsis="${red}..."
rmmatch=1

## source functions #################################################################################
. /usr/local/bin/editscript
sourcefn -l /usr/local/bin/indexopus.lib -f sex2sec -f printline -f confirm

while (( $# > 0 )); do
  [[ "$1" = @(edit|e|nano) ]] && editscript
  [[ "$1" = "-y" ]] && shift && rmmatch=true && continue
  [[ "$1" = "-n" ]] && no=1 && unset rmmatch && shift && continue
  [[ "$1" = "--stats" ]] && stats=true && initargs=("$1") && shift && continue
  [[ "$1" = @(--screen|-s) ]] && shift && screened=1 && continue
  [[ "$1" = @(-ys|-yes) ]] && shift && rmmatch=true && screened=1 && continue
  [[ -d "$1" ]] && clidir="$1" && initargs+="$1" && shift && continue
  { printf '%s is unrecognized.\n' "$1"; shift; confirm -y 'Proceed with script?' || exit 1; }
done

## this should work for "." as well as set the script up for the screen call below.
[[ "$clidir" ]] && clidir="$(realpath clidir)" && [[ "$(pwd)" != "$clidir" ]] && cd "$clidir"

if (( screened )); then
  printline "$bold Calling mp32opus in GNU screen $tput0"
  printf \\n\\n
  allm4s=(*.m4[ab])
  screenname="mp32opus-${allm4s[0]}"
  args=(mp32opus)
  ! (( no )) && args+=(-y)
  [[ "$clifile" ]] && args+=("$clifile")
  printf '%s ' "${args[@]}"
  printf \\n
  screen -dmS "${screenname:0:16}" "${args[@]}"
  screen -ls                                     #could probably add some logic to not delete shit
  printf \\n\\n                                  #leaving that for later, but screen implies -y as
  exit                                           #it doesn't really work otherwise?
fi

printline "${bold}  Welcome to ${white}$0  ${tput0}"

eza -l

printline "${bold}  Calling ${white}opus.book.4  ${tput0}"
opus.book.4
printline "${bold}  Calling ${white}indexopus  ${tput0}"
indexopus "${rmmatch:+-y}"
#readarray -t durations < <(mediaduration|sed 's/^[^:]*: //')
printline "${bold}  ${white}Checking durations  ${tput0}"
readarray -t durations < <(mediaduration)
printf %s\\n "${durations[@]}"
sourcedur="${durations[0]#*: }"
opusdur="${durations[1]#*: }"
opusdursec="$(sex2sec "$opusdur")"
sourcedursec="$(sex2sec "$sourcedur")"

title=(* -- Audiobook.opus)
(( "${#title[@]}" == 1 )) && title="${title% -- Audiobook.opus}"
ioutput="$(tput sitm)$title$(tput ritm) -- Audiobook.opus"

if (( opusdursec > 0 )); then
  verifydur=$(( (1000 * (sourcedursec - opusdursec)) / opusdursec ))
  verifydur="${verifydur/#-}"
  if (( verifydur < 1 )); then  #this is 0.1% difference
    { (( rmmatch )) || confirm -y "Durations are within 0.1%.\n  $(ls *mp3) \n\nRemove starting mp3 files?"; } && rm *.mp3
    [[ "$sourcedursec" != "$opusdursec" ]] &&
       printf '\n%sDurations don'\''t %sexactly%s match but fuckin'\'' close '\''nuff!%s\n' "$relipsis" "$(tput sitm)" "$(tput ritm)" "$tput0" ||
       printf '%sDurations match!%s\n' "$relipsis" "$tput0"
    printf '\n%sDone.\n\nPlease see %s/%s%s\n\n' "$relipsis" "$(pwd)" "$ioutput" "$tput0"
    exit
  elif (( rmmatch )) && (( verifydur )); then
    printf '%s%sThe source and opus audiobook durations do not match!\n' "$bold" "$red"
    printf '%s%s%s will not automatically delete starting and temporary files!\n' "$white" "$tput0" "$0"
    printf '\n\n'
    printf '%s-y/-f specified, but the durations do not match!\n%s' "$bold" "$tput0"
  fi
elif (( opusdursec = 0 )); then
  printf 'The duration of the opus files [in seconds] is zero and would present a divide by zero error. Investigate.\n(exit 1)\n.'
  exit 1
fi

