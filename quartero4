#!/bin/bash

tmp=tmp
scriptname=$(realpath "$0")
ulon=$(tput smul)  #underline on
uloff=$(tput rmul) #underline off
bold="$(tput bold)"  #bold on
tput0="$(tput sgr0)" #clear tput
red="$(tput setaf 9)" #red fg
white="$(tput setaf 15)" #white fg
relipsis="${red}..."
shopt -s nullglob extglob dotglob

editscript(){
  local script path; script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     if [[ ! -e "$swp" ]]; then printf "\n\n%s\n\n" "$swp"; (/usr/bin/nano "$scriptname"); exit
     else printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit;
  fi; }

pause(){ read -p "$*" ; }

cd-(){ cd - >/dev/null ; }

rmyn(){
  while true
  read -rp "$1"$'\n ' rmyn
   do
     case "$rmyn" in
       [yY] ) "${@:3}"; break;;
       [nN] ) printf '%s\n' "$2"; break;;
          * ) printf "Invalid response...\n";;
     esac
   done
}

calculatetime(){
duration=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)
hours=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t/3600' | tail -n 1)
minutes=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t/60%60' | tail -n 1)
seconds=$(find -type f -name "*$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t%60' | tail -n 1)

[[ "$hours" =~ "0*(.*)" ]] && hours=${BASH_REMATCH[1]}
[[ "$minutes" =~ "0*(.*)" ]] && minutes=${BASH_REMATCH[1]}
[[ "$seconds" =~ "0*(.*)" ]] && seconds=${BASH_REMATCH[1]}

printf "Duration %s\n" "$duration"

hours="${hours#0}"
hourmin=$(( hours*60 ))
echo "hourmin $hourmin"
minutes="${minutes#0}"
secmin=$((hourmin+minutes))
echo "secmin $secmin"
secmin=$((secmin*60))
seconds="${seconds#0}"
echo "secmin  $secmin"
echo "seconds $seconds"
totalsec=$(( "$seconds" + "$secmin" ))
echo "$totalsec"
divsec=$(python3 -c "print($totalsec/4)")
echo "$divsec"

}  #calculatetime()

rmyn(){
  while true
  read -rp "$1"$'\n ' rmyn
   do
     case "$rmyn" in
       [yY] ) "${@:3}"; break;;
       [nN] ) printf '%s\n' "$2"; break;;
          * ) printf "Invalid response...\n";;
     esac
   done
}
##--> rmyn() <--######################################################################################

confirm(){
 local ans IFS=
 while
  printf '%s' "$1"
  read -rp " " -n1 ans
   do
     printf '\n'
     case "$ans" in [Yy]) return 0;; [Nn]) return 1;;
     esac
   done
}
##--> confirm() <--###################################################################################

checkdur(){
  local m4a m4b opus mp3
  m4a=(*m4a)
  m4b=(*m4b)
  opus=(*opus)
  mp3=(*mp3)

if [[ "$1" ]]
  then
      find -type f -iname "*.$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
  else
    printf '\n%sDuration(s):%s\n' "$bold" "$tput0"
    [[ "${#m4a[@]}" -gt 0 ]] &&
      printf '%s %s%s%s %s%s\n' "$bold" "$red" "$(    find -type f -iname "*.m4a" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)" "$white"  "${m4a[@]}" "$tput0"
    [[ "${#m4b[@]}" -gt 0 ]] &&
      printf '%s %s%s%s %s%s\n' "$bold" "$red" "$(    find -type f -iname "*.m4b" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)" "$white" "${m4b[@]}" "$tput0"
    [[ "${#mp3[@]}" -gt 0 ]] &&
      printf '%s %s%s%s %s%s\n' "$bold" "$red" "$(    find -type f -iname "*.mp3" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)" "$white" "${mp3[@]}" "$tput0"
    [[ "${#opus[@]}" -gt 0 ]] &&
      printf '%s %s%s%s %s%s\n' "$bold" "$red" "$(    find -type f -iname "*.opus" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)" "$white" "${opus[@]}" "$tput0"
 fi
}
##--> checkdur() <--##################################################################################


#####################################################
# Main                                              #
#####################################################

[[ "$1" == @(edit|e|nano) ]] && editscript

SWD="$PWD"

ckbook=( *@(mp3|m4@(a|b)) )

if ((${#ckbook[@]}==0))
  then
    printf '\n%s%sNo mp3 or m4a/m4b files found!%s\nListing of %s:\n' "$red" "$bold" "$tput0" "$SWD"
	ls
    printf '\n\nexit 1\n'
    exit 1
fi


if [[ -n "$1" ]] && [[ -f "$1" ]]
  then
    title="$1"
elif ((${#ckbook[@]}==1))
  then
    title="$ckbook"
fi


if [[ "$title" != *\ --\ Audiobook.@(mp3|m4@(a|b)) ]]
  then
    title="$ckbook"
    printf '\n%s%sFile is not in the format of <title> -- Audiobook.@(mp3|m4a|m4b)!\n%s\n' "$red" "$bold" "$tput0"
      if confirm "Rename $title to ${ckbook%.*} -- Audiobook.${ckbook##*.}? (y/n) "
        then
          mv "$ckbook" "${ckbook%.*} -- Audiobook.${ckbook##*.}"
        else
          printf "No file name given or filename invalid...\n"
          printf "File must be in the format of \"* -- Audiobook.@(mp3|m4?)\n"
          exit
      fi
fi

inext="${title##*.}"
title="${title%.*}"
title="${title%% -- *}"
ititle="${ulon}$title${uloff}"


if [[ "$inext" == "@(m4b|m4a)" ]]
 then
   ext="$inext"
   outext="m4a"
elif [ "$inext" = "mp3" ] || [ "$inext" = "opus" ] || [[ "$inext" == "m4a" ]] || [[ "$inext" == "flac" ]]
 then
  ext="$inext"; outext="$inext"
 else
  printf "%s is not equal to a compatible file format of .mp3, .opus, .m4a, m4b.  Please correct the error and try again."
  exit 0
fi

printf ' inext=%s\noutext=%s\n   ext=%s' "$inext" "$outext" "$ext"

count=1

[[ ! -d "$tmp" ]] && mkdir "$tmp"

for i in *"$ext"
do
  wholefile="$i"
  echo "File to split: $wholefile"
#  calculatetime "$(basename $wholefile)"
  calculatetime "$wholefile"

while [[ "$count" -lt 5 ]]
  do
    echo "$count"
#echo '>>>>>       ffmpeg -i "$wholefile" -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -acodec copy "${wholefile%.*} -- Part 0$count.$ext" '
#    ffmpeg -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -i "$whilefile" -acodec copy "${wholefile%.*} -- Part 0$count.$ext"
    ffmpeg -n -nostdin -hide_banner -stats -v error -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -i "$wholefile" -vn -acodec copy "$tmp/${wholefile%% -- *} -- Part 0$count.$outext"
    ((count++))
  done
done

cd "$tmp"

for i in First Second Third Fourth
 do
   ((n++))
   for f in *\ --\ Part\ 0"$n".*
    do
      mv "$f" "${f/./: $i Quarter.}"
    done
 done

opus.book.4

mediaduration

indexopus -y "$title"

printf '#####################################################\nleaving indexopus\n#####################################################\n\n'


#printf '\n\n...Done.\n\nPlease see %s/%s\n\n' "$PWD" "$ioutput"

#printf '%s\n%s\n' "$(ls *\ Audiobook.opus)" "$(mediainfo *\ Audiobook.opus|grep ^Duration\ |uniq)"


printf '\n%smoving ./tmp/%s -- Audiobook.opus to %s%s\n\n' "$relipsis" "$ititle" "$SWD" "$tput0"
mv *\ Audiobook.opus "$SWD"
lsopus=( *opus )
((${#lsopus[@]} > 0)) &&
  printf '%sopus files still remain in ./tmp!\nls *opus:\n%s' "$relipsis" "$tput0" &&
  printf '%s\n' "${lsopus[@]}" &&
  echo

ckparts=( "$title -- Part "*.opus )
(( "${#ckparts[@]}" > 0 )) &&
    printf -- '--> %sThe duration of the %s -- Part *opus is %s\n\n%s' "$relipsis" "$ititle" "$duration" "$tput0" &&
    rmyn "Remove $ititle -- Part *.opus files? " "...Leaving $ititle -- Part *.opus files..." rm "$title"\ --\ Part\ *.opus

cd "$SWD"

checkdur
echo

rmyn "Remove ./tmp? " "...Leaving ./tmp" rm -r ./tmp

#printf '%s\n%s\n' "$(ls *\ Audiobook.m4?)" "$(mediainfo *\ Audiobook.m4?|grep ^Duration\ |uniq)"

rm -i *.@(mp3|m4@(a|b))

#rmr "$tmp"




#https://www.reddit.com/r/ffmpeg/comments/107p3mh/remove_all_apart_from_audio/
#Mon Dec 11 10:52:50 AM EST 2023

