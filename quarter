#!/bin/bash

scriptname=$(realpath "$0")

function editscript(){
  local script path; script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     if [[ ! -e "$swp" ]]; then printf "\n\n%s\n\n" "$swp"; (/usr/bin/nano "$scriptname"); exit
     else printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit;
  fi; }

function pause(){ read -p "$*" ; }


function calculatetime(){
echo "this is \$1 $1"
duration=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1)
hours=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t/3600' | tail -n 1)
minutes=$(find -type f -name "$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t/60%60' | tail -n 1)
seconds=$(find -type f -name "*$1" -print0 | xargs -0 mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d\n",$t%60' | tail -n 1)
#hours=$((10#"$hours"))
#minutes=$((10#$minutes))
#seconds=$((10#$seconds))
[[ "$hours" =~ "0*(.*)" ]] && hours=${BASH_REMATCH[1]}
#[[ "$minutes" =~ "0*(.*)" ]] && minutes=BASH_REMATCH[1]}
[[ "$minutes" =~ "0*(.*)" ]] && minutes=${BASH_REMATCH[1]}
[[ "$seconds" =~ "0*(.*)" ]] && seconds=${BASH_REMATCH[1]}

printf "Duration %s\n" "$duration"
#if [[ $seconds -gt 29 ]]; then ((minutes++)); fi

#printf "Duration of ${PWD##*/}: %02d:%02d hh:mm\n" ${hours#0} ${minutes#0}
hours="${hours#0}"
hourmin=$(( hours*60 ))
echo "hourmin $hourmin"
minutes="${minutes#0}"
secmin=$((hourmin+minutes))
echo "secmin $secmin"
secmin=$((secmin*60))
#secmin=$(( 10#secmin ))
#seconds=$(( 10#seconds ))
#secmin="${secmin#0}"
seconds="${seconds#0}"
echo "secmin  $secmin"
echo "seconds $seconds"
#totalseconds=$(( seconds+60*minutes+60*hours*60 ))
#totalsec=[[ "$(($((10#$seconds))+$((10#$secmin))))" ]]
totalsec=$(( "$seconds" + "$secmin" ))
#totalsec=$(($seconds+$secmin))
echo "$totalsec"
divsec=$(python3 -c "print($totalsec/4)")
echo "$divsec"
}

#####################################################
# Main
#####################################################

[[ "$1" == @(edit|e|nano) ]] && editscript

inext="$1"; inext="${inext##*.}"

if [[ "$inext" == "m4b" ]]
 then
   ext="$inext"
   outext="m4a"
elif [ "$inext" = "mp3" ] || [ "$inext" = "opus" ] || [[ "$inext" == "m4a" ]] || [[ "$inext" == "flac" ]]
 then
  ext="$inext"; outext="$inext"
 else
  printf "%s is not equal to a compatible file format of .mp3, .opus, .m4a, m4b.  Please correct the error and try again."
  exit 0
fi

printf ' inext=%s\noutext=%s\n   ext=%s' "$inext" "$outext" "$ext"
pause


count=1
for i in *"$ext"
do
  wholefile="$i"
  echo "File to split: $wholefile"
#  calculatetime "$(basename $wholefile)"
  calculatetime "$wholefile"

pause

  while [[ "$count" -lt 5 ]]
  do
    echo "$count"
#echo '>>>>>       ffmpeg -i "$wholefile" -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -acodec copy "${wholefile%.*} -- Part 0$count.$ext" '
#    ffmpeg -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -i "$whilefile" -acodec copy "${wholefile%.*} -- Part 0$count.$ext"
    ffmpeg -n -nostdin -hide_banner -stats -ss $(python -c "print(($count-1)*$divsec)") -to $(python -c "print($count*$divsec)") -i "$wholefile" -vn -acodec copy "${wholefile%.*} -- Part 0$count.$outext"
    ((count++))
  done
done

for i in First Second Third Fourth
 do
   ((n++))
   for f in *" -- Part 0$n.opus"
    do
      mv "$f" "${f/./: $i Quarter.}"
    done;
 done

md
rm -i *m4?



#https://www.reddit.com/r/ffmpeg/comments/107p3mh/remove_all_apart_from_audio/
#Mon Dec 11 10:52:50 AM EST 2023

